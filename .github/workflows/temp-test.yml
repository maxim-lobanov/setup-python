name: Temporary test
on: [push, pull_request]

jobs:
  default-version:
    name: Setup latest version
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-16.04, ubuntu-18.04]
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: setup-python default
      uses: ./

    - name: Validate version
      run: python --version

    - name: Run simple python code
      run: python __tests__/simple_test.py

  all-available-versions:
    name: Setup all available versions
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-16.04, ubuntu-18.04]
        python: [2.7.17, 3.5.4, 3.5.9, 3.6.8, 3.6.10, 3.7.4, 3.7.5, 3.7.6, 3.8.2]
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: setup-python ${{ matrix.python }}
      uses: ./
      if: "!( matrix.os == 'windows-latest' && (matrix.python == '3.5.9' || matrix.python == '3.6.10') )"
      with:
        python-version: ${{ matrix.python }}

    - name: Validate version
      run: python --version

    - name: Run simple python code
      run: python __tests__/simple_test.py

  setup-on-clean-machine:
    name: Setup version on clean machine
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, ubuntu-16.04, ubuntu-18.04]
        python: [2.7.17, 3.5.4, 3.5.9, 3.6.8, 3.6.10, 3.7.6, 3.8.2]
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Clean machine
      run: |
        Remove-Item -Path "${env:AGENT_TOOLSDIRECTORY}/Python" -Recurse -Force
      shell: pwsh

    - name: setup-python ${{ matrix.python }}
      uses: ./
      with:
        python-version: ${{ matrix.python }}

    - name: Validate version
      run: python --version

    - name: Run simple python code
      run: python __tests__/simple_test.py

  setup-on-clean-machine-win:
    name: Setup version on clean machine
    runs-on: windows-latest
    strategy:
      matrix:
        python: [2.7.17, 3.5.4, 3.6.8, 3.7.6, 3.8.2]
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Clean machine
      run: |
        function Get-ArchitectureFilter {
            param(
                [Parameter (Mandatory = $true)]
                [String]$Architecture
            )

            if ($Architecture -eq 'x86') {
                "32-bit"
            } else {
                "64-bit"
            }
        }

        function Get-PythonFilter {
            param(
                [Parameter (Mandatory = $true)]
                [String]$ArchFilter,
                [Parameter (Mandatory = $true)]
                [String]$Architecture,
                [Parameter (Mandatory = $true)]
                [Boolean]$IsMSI,
                [Parameter (Mandatory = $true)]
                [Int32]$MajorVersion,
                [Parameter (Mandatory = $true)]
                [Int32]$MinorVersion
            )

            ### Python 2.7 have no architecture postfix
            if ($IsMSI -and $Architecture -eq "x86") {
                "(Name like '%Python%%$MajorVersion.$MinorVersion%') and (not (Name like '%64-bit%'))"
            } else {
                "Name like '%Python%%$MajorVersion.$MinorVersion%%$ArchFilter%'"
            }
        }

        function Uninstall-Python {
            param(
                [Parameter (Mandatory = $true)]
                [String]$Architecture,
                [Parameter (Mandatory = $true)]
                [Boolean]$IsMSI,
                [Parameter (Mandatory = $true)]
                [Int32]$MajorVersion,
                [Parameter (Mandatory = $true)]
                [Int32]$MinorVersion
            )

            $ArchFilter = Get-ArchitectureFilter -Architecture $Architecture
            Write-Host "Check for installed Python$MajorVersion.$MinorVersion $ArchFilter WMI..."
            $PythonFilter = Get-PythonFilter -ArchFilter $ArchFilter -Architecture $Architecture -IsMSI $IsMSI -MajorVersion $MajorVersion -MinorVersion $MinorVersion
            Get-WmiObject Win32_Product -Filter $PythonFilter | Foreach-Object { 
                Write-Host "Uninstalling $($_.Name) ..."
                $_.Uninstall() | Out-Null 
            }
        }

        Uninstall-Python -Architecture "x64" -IsMSI $false -MajorVersion 3 -MinorVersion 8

        Remove-Item -Path "${env:AGENT_TOOLSDIRECTORY}/Python/3.8.2" -Recurse -Force
      shell: powershell


    - name: setup-python ${{ matrix.python }}
      uses: ./
      with:
        python-version: ${{ matrix.python }}

    - name: Validate version
      run: python --version

    - name: Run simple python code
      run: python __tests__/simple_test.py